#ifdef _DOS
#ifdef __HUGE__
#define __HUGE_OR_UNREAL__
#endif
#ifdef __UNREAL__
#define __HUGE_OR_UNREAL__
#endif

#ifdef __HUGE_OR_UNREAL__
static
int DosWrite(int handle, void* buf, unsigned size, unsigned* sizeOrError)
{
mov ah, 0x40
mov bx, [bp + 8]
mov edx, [bp + 12]
ror edx, 4
mov ds, dx
shr edx, 28
mov cx, [bp + 16]
int 0x21
movzx ebx, ax
cmc
sbb ax, ax
and eax, 1
mov esi, [bp + 20]
#ifdef __HUGE__
ror esi, 4
mov ds, si
shr esi, 28
mov [si], ebx
#else
push word 0
pop  ds
mov  [esi], ebx
#endif
}
#endif // __HUGE_OR_UNREAL__

#ifdef __SMALLER_C_16__
static
int DosWrite(int handle, void* buf, unsigned size, unsigned* sizeOrError)
{
mov ah, 0x40
mov bx, [bp + 4]
mov dx, [bp + 6]
mov cx, [bp + 8]
int 0x21
mov bx, ax
cmc
sbb ax, ax
and ax, 1
mov si, [bp + 10]
mov [si], bx
}
#endif // __SMALLER_C_16__

#ifdef _DPMI
#include <string.h>
#include "idpmi.h"
static
int DosWrite(int handle, void* buf, unsigned size, unsigned* sizeOrError)
{
  __dpmi_int_regs regs;
  memcpy(__dpmi_iobuf, buf, size);
  memset(&regs, 0, sizeof regs);
  regs.eax = 0x4000;
  regs.ebx = handle;
  regs.ecx = size;
  regs.edx = (unsigned)__dpmi_iobuf & 0xF;
  regs.ds = (unsigned)__dpmi_iobuf >> 4;
  if (__dpmi_int(0x21, &regs))
  {
    *sizeOrError = -1;
    return 0;
  }
  *sizeOrError = regs.eax & 0xFFFF;
  return (regs.flags & 1) ^ 1; // carry
}
#endif // _DPMI

ssize_t __write(int fd, void* buf, size_t size)
{
  ssize_t cnt = 0;
  char* p = buf;

  if ((ssize_t)size < 0)
  {
    return -1;
  }

  while (size)
  {
#ifdef __HUGE_OR_UNREAL__
    // DOS can read/write at most 65535 bytes at a time.
    // An arbitrary 20-bit physical address can be transformed
    // into a segment:offset pair such that offset is always <= 15
    // (which is what we do under the hood in the huge mode(l))
    // and therefore the size is additionally limited by this
    // offset that can be as high as 15 and DOS will only have
    // the range from this offset (at most 15(0xF)) to 65535(0xFFFF)
    // within a segment. So, cap the size at 0xFFF0.
    unsigned sz = (size > 0xFFF0) ? 0xFFF0 : size;
#endif
#ifdef _DPMI
    // Similarly to huge, the DPMI I/O buffer size is also smaller than 64KB.
    unsigned sz = (size > __DPMI_IOFBUFSZ) ? __DPMI_IOFBUFSZ : size;
#endif
#ifndef __HUGE_OR_UNREAL__
#ifndef _DPMI
    unsigned sz = size;
#endif
#endif
    unsigned writtenOrError;
    if (DosWrite(fd, p, sz, &writtenOrError))
    {
      p += writtenOrError;
      cnt += writtenOrError;
      size -= writtenOrError;
      if (writtenOrError < sz)
        return cnt;
    }
    else
    {
      return -1;
    }
  }

  return cnt;
}

#endif // _DOS
